@page "/Jurnal"
@inject HttpClient Http
@using StudyDepartment.Web.Model;
<h1>Журнал группы</h1>

<p>...</p>

@if (jurnalRecords == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>#</th>
                <th>ФИО студента</th>
                @foreach (var subject in subjects)
                {
                    <th>@subject</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var studentName in studentMarks.Keys)
            {
                <tr>
                    <td>@NextId()</td>
                    <td>@studentName</td>
                    @foreach (var subject in subjects)
                    {
                        <MarkComponent jurnalRecord="@GetMark(studentName,subject)"></MarkComponent>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private int i = 1;
    private JurnalRecord[] jurnalRecords;
    private Dictionary<string, Dictionary<string, JurnalRecord>> studentMarks;
    private List<string> subjects;

    protected override async Task OnInitializedAsync()
    {
        jurnalRecords = await Http.GetJsonAsync<JurnalRecord[]>("http://localhost:8080/journal/");
        subjects = jurnalRecords.Select(d => d.Subject_Short_Name).Distinct().ToList();
        studentMarks = jurnalRecords.GroupBy(d => d.Student_Full_Name)
            .ToDictionary(d => d.Key, w => w.GroupBy(w => w.Subject_Short_Name).ToDictionary(wk => wk.Key, dd => dd.FirstOrDefault()));
    }

    public int NextId() => i++;

    public JurnalRecord GetMark(string student, string subject)
    {
        // JurnalRecord record = studentMarks[studentName][subject]?.Mark_Value;

        if (studentMarks.ContainsKey(student) && studentMarks[student].ContainsKey(subject))
        {
            return studentMarks[student][subject];
        }
        else
        {
            return null;
        }
    }
}